// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using P3Project.API;
//
//    var scopusResponse = ScopusResponse.FromJson(jsonString);

namespace P3Project.API
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ScopusResponse
    {
        [JsonProperty("search-results", NullValueHandling = NullValueHandling.Ignore)]
        public SearchResults SearchResults { get; set; }
    }

    public partial class SearchResults
    {
        [JsonProperty("opensearch:totalResults", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? OpensearchTotalResults { get; set; }

        [JsonProperty("opensearch:startIndex", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? OpensearchStartIndex { get; set; }

        [JsonProperty("opensearch:itemsPerPage", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? OpensearchItemsPerPage { get; set; }

        [JsonProperty("opensearch:Query", NullValueHandling = NullValueHandling.Ignore)]
        public OpensearchQuery OpensearchQuery { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public List<Link> Link { get; set; }

        [JsonProperty("entry", NullValueHandling = NullValueHandling.Ignore)]
        public List<Entry> Entry { get; set; }
    }

    public partial class Entry
    {
        [JsonProperty("@_fa", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? Fa { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public List<Link> Link { get; set; }

        [JsonProperty("prism:url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri PrismUrl { get; set; }

        [JsonProperty("dc:identifier", NullValueHandling = NullValueHandling.Ignore)]
        public string DcIdentifier { get; set; }

        [JsonProperty("eid", NullValueHandling = NullValueHandling.Ignore)]
        public string Eid { get; set; }

        [JsonProperty("dc:title", NullValueHandling = NullValueHandling.Ignore)]
        public string DcTitle { get; set; }

        [JsonProperty("dc:creator", NullValueHandling = NullValueHandling.Ignore)]
        public string DcCreator { get; set; }

        [JsonProperty("prism:publicationName", NullValueHandling = NullValueHandling.Ignore)]
        public string PrismPublicationName { get; set; }

        [JsonProperty("prism:issn", NullValueHandling = NullValueHandling.Ignore)]
        public string PrismIssn { get; set; }

        [JsonProperty("prism:volume", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? PrismVolume { get; set; }

        [JsonProperty("prism:issueIdentifier", NullValueHandling = NullValueHandling.Ignore)]
        public string PrismIssueIdentifier { get; set; }

        [JsonProperty("prism:pageRange")]
        public string PrismPageRange { get; set; }

        [JsonProperty("prism:coverDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PrismCoverDate { get; set; }

        [JsonProperty("prism:coverDisplayDate", NullValueHandling = NullValueHandling.Ignore)]
        public string PrismCoverDisplayDate { get; set; }

        [JsonProperty("prism:doi", NullValueHandling = NullValueHandling.Ignore)]
        public string PrismDoi { get; set; }

        [JsonProperty("citedby-count", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? CitedbyCount { get; set; }

        [JsonProperty("affiliation", NullValueHandling = NullValueHandling.Ignore)]
        public List<Affiliation> Affiliation { get; set; }

        [JsonProperty("prism:aggregationType", NullValueHandling = NullValueHandling.Ignore)]
        public string PrismAggregationType { get; set; }

        [JsonProperty("subtype", NullValueHandling = NullValueHandling.Ignore)]
        public string Subtype { get; set; }

        [JsonProperty("subtypeDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string SubtypeDescription { get; set; }

        [JsonProperty("source-id", NullValueHandling = NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        [JsonProperty("openaccess", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? Openaccess { get; set; }

        [JsonProperty("openaccessFlag", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OpenaccessFlag { get; set; }

        [JsonProperty("prism:eIssn", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? PrismEIssn { get; set; }

        [JsonProperty("pii", NullValueHandling = NullValueHandling.Ignore)]
        public string Pii { get; set; }

        [JsonProperty("article-number", NullValueHandling = NullValueHandling.Ignore)]
        public string ArticleNumber { get; set; }

        [JsonProperty("freetoread", NullValueHandling = NullValueHandling.Ignore)]
        public Freetoread Freetoread { get; set; }

        [JsonProperty("freetoreadLabel", NullValueHandling = NullValueHandling.Ignore)]
        public Freetoread FreetoreadLabel { get; set; }

        [JsonProperty("pubmed-id", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? PubmedId { get; set; }
    }

    public partial class Affiliation
    {
        [JsonProperty("@_fa", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? Fa { get; set; }

        [JsonProperty("affilname", NullValueHandling = NullValueHandling.Ignore)]
        public string Affilname { get; set; }

        [JsonProperty("affiliation-city", NullValueHandling = NullValueHandling.Ignore)]
        public string AffiliationCity { get; set; }

        [JsonProperty("affiliation-country", NullValueHandling = NullValueHandling.Ignore)]
        public string AffiliationCountry { get; set; }
    }

    public partial class Freetoread
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public List<Value> Value { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("$", NullValueHandling = NullValueHandling.Ignore)]
        public string Empty { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("@_fa", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? Fa { get; set; }

        [JsonProperty("@ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("@href", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Href { get; set; }

        [JsonProperty("@type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class OpensearchQuery
    {
        [JsonProperty("@role", NullValueHandling = NullValueHandling.Ignore)]
        public string Role { get; set; }

        [JsonProperty("@searchTerms", NullValueHandling = NullValueHandling.Ignore)]
        public string SearchTerms { get; set; }

        [JsonProperty("@startPage", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? StartPage { get; set; }
    }

    public partial class ScopusResponse
    {
        public static ScopusResponse FromJson(string json) => JsonConvert.DeserializeObject<ScopusResponse>(json, P3Project.API.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ScopusResponse self) => JsonConvert.SerializeObject(self, P3Project.API.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }
}
